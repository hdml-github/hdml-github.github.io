@startuml package
  title @hdml/renderer package

  package "@hdml/common" as common {
    class LitElement [[https://lit.dev/docs/api/LitElement/]] {
      +[[./LitElement_constructor.svg constructor]](): LitElement
      ..
      +connectedCallback(): void
      +disconnectedCallback(): void
      ..
      +[[./LitElement_requestUpdate.svg requestUpdate]](): void
      #[[./LitElement_performUpdate.svg performUpdate]](): void
      #shouldUpdate(props: Map<string, unknown>): boolean
      #willUpdate(values: PropertyValues): void
      #[[./LitElement_update.svg update]](values: PropertyValues): void
      ..
      #firstUpdated(props: Map<PropertyKey, unknown>): void
      #updated(props: Map<string, unknown>): void
      #[[./LitElement_getUpdateComplete.svg getUpdateComplete]](): Promise<void>
    }

    class UnifiedElement extends LitElement {
      +get uid(): string
    }
  }

  package "@hdml/renderer" as renderer {
    ' enum TickStyles {
    '   +"text"
    '   +"rect"
    '   +"ellipse"
    ' }

    ' enum CurveTypes {
    '   +"natural"
    '   +"linear"
    '   +"cubic"
    '   +"step"
    '   +"bezier"
    '   +"basis"
    '   +"cardinal"
    '   +"catmull-rom"
    ' }

    ' enum CurveBezierTangents {
    '   +"horizontal"
    '   +"vertical"
    ' }

    ' enum CurveCubicMonotonicity {
    '   +"x"
    '   +"y"
    ' }

    ' enum CurveStepChanges {
    '   +"before"
    '   +"middle"
    '   +"after"
    ' }

    ' interface TrackedStyle {
    '   ..size..
    '   +width: number
    '   +height: number
    '   ..position..
    '   +top: number
    '   +left: number
    '   ..paddings..
    '   +paddingTop: number
    '   +paddingRight: number
    '   +paddingBottom: number
    '   +paddingLeft: number
    '   ..cursor..
    '   +cursor: string
    '   ..line width..
    '   +lineWidth: number
    '   +lineWidthActive: number
    '   +lineWidthFocus: number
    '   +lineWidthHover: number
    '   ..line color..
    '   +lineColor: string
    '   +lineColorActive: string
    '   +lineColorFocus: string
    '   +lineColorHover: string
    '   ..line style..
    '   +lineStyle: string
    '   +lineStyleActive: string
    '   +lineStyleFocus: string
    '   +lineStyleHover: string
    '   ..fill color (background)..
    '   +fillColor: string
    '   +fillColorActive: string
    '   +fillColorFocus: string
    '   +fillColorHover: string
    '   ..font family..
    '   +fontFamily: string
    '   +fontFamilyActive: string
    '   +fontFamilyFocus: string
    '   +fontFamilyHover: string
    '   ..font size..
    '   +fontSize: string
    '   +fontSizeActive: string
    '   +fontSizeFocus: string
    '   +fontSizeHover: string
    '   ..font weight..
    '   +fontWeight: string
    '   +fontWeightActive: string
    '   +fontWeightFocus: string
    '   +fontWeightHover: string
    '   ..font style..
    '   +fontStyle: string
    '   +fontStyleActive: string
    '   +fontStyleFocus: string
    '   +fontStyleHover: string
    '   ..tick style..
    '   +tickStyle: TickStyles
    '   +tickWidth: number
    '   +tickHeight: number
    '   ..curve style..
    '   +curveType: CurveTypes
    '   +curveBasisBeta: number [0..1]
    '   +curveBezierTangents: CurveBezierTangents
    '   +curveCardinalTension: number [0..1]
    '   +curveCatmullRomAlpha: number [0..1]
    '   +curveCubicMonotonicity: CurveCubicMonotonicity
    '   +curveStepChange: CurveStepChanges
    ' }
    ' TrackedStyle -- TickStyles
    ' TrackedStyle -- CurveTypes
    ' TrackedStyle -- CurveBezierTangents
    ' TrackedStyle -- CurveCubicMonotonicity
    ' TrackedStyle -- CurveStepChanges

    ' abstract class AbstractChartElement {
    '   -_view: null | HdmlViewElement
    '   -_ssheet: CompletedCSSStyleSheet
    '   -_styles: CSSStyleDeclaration
    '   -_cache: null | TrackedStyles
    '   -_stored: TrackedStyles
    '   ..
    '   #{abstract} geometrySelector: null | string
    '   ..
    '   +get view(): null | HdmlViewElement
    '   +get styles(): CSSStyleDeclaration
    '   +get tracked(): TrackedStyles
    '   +get stored(): TrackedStyles
    '   ..
    '   +constructor(): AbstractChartElement
    '   ..
    '   +connectedCallback(): void
    '   +disconnectedCallback(): void
    '   +shouldUpdate(props: Map<string, unknown>): boolean
    '   ..
    '   #firstUpdated(props: Map<PropertyKey, unknown>): void
    '   #updated(props: Map<string, unknown>): void
    '   #resetStylesheets(sheets: CSSStyleSheet[]): void
    '   #updateStyles(): void
    '   ..
    '   #{abstract} renderGeometry(): void
    '   #{abstract} updateGeometry(): void
    '   ..
    '   -stylesChangedListener(): void
    '   -getStaticStyles(): lit.CSSResult
    ' }
    ' UnifiedElement <|-- AbstractChartElement
    ' AbstractChartElement *-- TrackedStyle

    abstract class AbstractChartElement {
      -_forceUpdate: boolean
      ..
      +[[./AbstractChartElement_forceUpdate.svg forceUpdate]](): void
      #[[./AbstractChartElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      ..
      #[[./AbstractChartElement_firstUpdated.svg firstUpdated]](props: Map<string, unknown>): void
      #[[./AbstractChartElement_updated.svg updated]](props: Map<string, unknown>): void
      ..
      #{abstract} renderGeometry(): void
      #{abstract} renderStyle(): void
      ..
      #{abstract} updateGeometry(): void
      #{abstract} updateStyle(): void
    }
    UnifiedElement <|-- AbstractChartElement

    abstract class AbstractStyleElement {
      -_shadowStyle: CompletedCSSStyleSheet
      -_geometryStyle: CompletedCSSStyleSheet
      -_computedStyle: CSSStyleDeclaration
      -_trackedStyleStore: TrackedStyle
      -_trackedStyleCache: TrackedStyle
      ..
      #{abstract} selector: null | string
      ..
      +get geometryStyle(): CompletedCSSStyleSheet
      +get staticStyle(): lit.CSSResult
      +get trackedStyle(): TrackedStyle
      ..
      +[[./AbstractStyleElement_connectedCallback.svg connectedCallback]](): void
      +[[./AbstractStyleElement_disconnectedCallback.svg disconnectedCallback]](): void
      ..
      -observersStart(): void
      -observersStop(): void
      -clearTrackedStyleCache(): void
      -[[./AbstractStyleElement_htmlStyleChangedListener.svg htmlStyleChangedListener]](evt: HtmlStyleChanged): void
      ..
      #[[./AbstractStyleElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      ..
      #[[./AbstractStyleElement_renderStyle.svg renderStyle]](): void
      #[[./AbstractStyleElement_updateStyle.svg updateStyle]](): void
      ..
      -[[./AbstractStyleElement_updateShadowStyle.svg updateShadowStyle]](): void
      #getShadowStyle(): string[]
      ..
      -[[./AbstractStyleElement_updateGeometryStyle.svg updateGeometryStyle]](): void
      #[[./AbstractStyleElement_getGeometryStyle.svg getGeometryStyle]](): string[]
      ..
      -getSvgStateStyle(state?: hover|focus|active): string
      -getSvgCursorStyle(state?: hover|focus|active): string
      -getSvgOutlineStyle(state?: hover|focus|active): string
      -getSvgFontFamilyStyle(state?: hover|focus|active): string
      -getSvgFontSizeStyle(state?: hover|focus|active): string
      -getSvgFontWeightStyle(state?: hover|focus|active): string
      -getSvgFontStyleStyle(state?: hover|focus|active): string
      -getSvgStrokeStyle(state?: hover|focus|active): string
      -getSvgStrokeWidthStyle(state?: hover|focus|active): string
      -getSvgStrokeDasharrayStyle(state?: hover|focus|active): string
      -getSvgStrokeLinecapStyle(state?: hover|focus|active): string
      -getSvgFillStyle(state?: hover|focus|active): string
    }
    AbstractChartElement <|-- AbstractStyleElement
  }
@enduml

@startuml LitElement_constructor
  title LitElement#constructor()

  start
    :[[./LitElement_requestUpdate.svg this.requestUpdate()]] ]
  end
@enduml

@startuml LitElement_requestUpdate
  title LitElement#requestUpdate()

  start
    :Adding request to the queue,\nasync dequeue.|
    :[[./LitElement_performUpdate.svg this.performUpdate()]] ]
  end
@enduml

@startuml LitElement_performUpdate
  title LitElement#performUpdate()

  start

    group Update
      if (this.shouldUpdate()) then (yes)
        :this.willUpdate()]
        :[[./LitElement_update.svg this.update()]] ]
      endif
    end group

    group PostUpdate
      if (!this.hasUpdated) then (yes)
        :this.firstUpdated()]
      endif
      :this.updated()]
      :[[./LitElement_getUpdateComplete.svg this.getUpdateComplete()]] ]
    end group

  end
@enduml

@startuml LitElement_update
  title LitElement#update()

  start
    :Reflects property values to attributes.]
    :this.render()]
  end
@enduml

@startuml LitElement_getUpdateComplete
  title LitElement#getUpdateComplete()

  start
    :resolve(this.updateComplete)]
  end
@enduml

@startuml AbstractChartElement_forceUpdate
  title AbstractChartElement#forceUpdate()

  start
    :this._forceUpdate = true]
    :this.[[./LitElement_requestUpdate.svg requestUpdate]]()]
  end
@enduml

@startuml AbstractChartElement_shouldUpdate
  title AbstractChartElement#shouldUpdate()

  start
    if (this._forceUpdate === true) then (yes)
      :res = true]
    else (no)
      :res = false]
    endif
    :this._forceUpdate = false]
    :return res/
  end
@enduml

@startuml AbstractChartElement_firstUpdated
  title AbstractChartElement#firstUpdated()

  start
    :setTimeout(this.renderGeometry)]
    :setTimeout(this.renderStyle)]
  end
@enduml

@startuml AbstractChartElement_updated
  title AbstractChartElement#updated()

  start
    :setTimeout(this.updateStyles)]
    :setTimeout(this.updateGeometry)]
    :this.dispatchEvent("HdmlElementUpdated")]
  end
@enduml

@startuml AbstractStyleElement_connectedCallback
  title AbstractStyleElement#connectedCallback()

  start
    :super.connectedCallback()]
    :window.addEventListener("HtmlStyleUpdated", this.[[./AbstractStyleElement_htmlStyleChangedListener.svg htmlStyleChangedListener]])]
    :this.observersStart()]
  end
@enduml

@startuml AbstractStyleElement_disconnectedCallback
  title AbstractStyleElement#disconnectedCallback()

  start
    :super.disconnectedCallback()]
    :window.removeEventListener("HtmlStyleUpdated", this.[[./AbstractStyleElement_htmlStyleChangedListener.svg htmlStyleChangedListener]])]
    :this.observersStop()]
  end
@enduml

@startuml AbstractStyleElement_htmlStyleChangedListener
  title AbstractStyleElement#htmlStyleChangedListener()

  start
    :this.clearTrackedStyleCache()]
    :this.[[./AbstractChartElement_forceUpdate.svg forceUpdate]]()]
  end
@enduml

@startuml AbstractStyleElement_shouldUpdate
  title AbstractStyleElement#shouldUpdate()

  start
    if (this._trackedStyleCache !== this._trackedStyleStore) then (yes)
      :return true/
    else (no)
      :return super.[[./AbstractChartElement_shouldUpdate.svg shouldUpdate]]() /
    endif
  end
@enduml

@startuml AbstractStyleElement_renderStyle
  title AbstractStyleElement#renderStyle()

  start
    :lit.adoptStyles(this.renderRoot, [this.staticStyle, ...this._shadowStyle])]
  end
@enduml

@startuml AbstractStyleElement_updateStyle
  title AbstractStyleElement#updateStyle()

  start
    :this._trackedStyleStore = ...this._trackedStyleCache]
    :this.[[./AbstractStyleElement_updateShadowStyle.svg updateShadowStyle]]()]
    :this.[[./AbstractStyleElement_updateGeometryStyle.svg updateGeometryStyle]]()]
  end
@enduml

@startuml AbstractStyleElement_updateShadowStyle
  title AbstractStyleElement#updateShadowStyle()

  start
    :styles = this.getShadowStyle()]
    while (i = this._shadowStyle.cssRules.length - 1; i >= 0; i--)
      :this._shadowStyle.deleteRule(i)]
    endwhile
    while (styles.forEach(rule))
      :this._shadowStyle.insertRule(rule)]
    endwhile
  end
@enduml

@startuml AbstractStyleElement_updateGeometryStyle
  title AbstractStyleElement#updateGeometryStyle()

  start
    :styles = this.[[./AbstractStyleElement_getGeometryStyle.svg getGeometryStyle]]()]
    while (i = this.geometryStyle.cssRules.length - 1; i >= 0; i--)
      :this.geometryStyle.deleteRule(i)]
    endwhile
    while (styles.forEach(rule))
      :this.geometryStyle.insertRule(rule)]
    endwhile
  end
@enduml

@startuml AbstractStyleElement_getGeometryStyle
  title AbstractStyleElement#getGeometryStyle()

  start
    :default = getSvgStateStyle()]
    :active = getSvgStateStyle("active")]
    :focus = getSvgStateStyle("focus")]
    :hover = getSvgStateStyle("hover")]
    :return [default, active, focus, hover] /
  end
@enduml