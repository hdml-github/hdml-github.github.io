@startuml package
  title @hdml/renderer package

  package "@hdml/common" as common {
    class LitElement [[https://lit.dev/docs/api/LitElement/]] {
      +[[./LitElement_constructor.svg constructor]](): LitElement
      ..
      +connectedCallback(): void
      +disconnectedCallback(): void
      ..
      +[[./LitElement_requestUpdate.svg requestUpdate]](): void
      #[[./LitElement_performUpdate.svg performUpdate]](): void
      #shouldUpdate(props: Map<string, unknown>): boolean
      #willUpdate(values: PropertyValues): void
      #[[./LitElement_update.svg update]](values: PropertyValues): void
      ..
      #firstUpdated(props: Map<PropertyKey, unknown>): void
      #updated(props: Map<string, unknown>): void
      #[[./LitElement_getUpdateComplete.svg getUpdateComplete]](): Promise<void>
    }

    class UnifiedElement extends LitElement {
      +get uid(): string
    }
  }

  package "@hdml/renderer" as renderer {
    enum TickStyles {
      +"text"
      +"rect"
      +"ellipse"
    }

    enum CurveTypes {
      +"natural"
      +"linear"
      +"cubic"
      +"step"
      +"bezier"
      +"basis"
      +"cardinal"
      +"catmull-rom"
    }

    enum CurveBezierTangents {
      +"horizontal"
      +"vertical"
    }

    enum CurveCubicMonotonicity {
      +"x"
      +"y"
    }

    enum CurveStepChanges {
      +"before"
      +"middle"
      +"after"
    }

    interface TrackedStyle {
      ..size..
      +width: number
      +height: number
      ..position..
      +top: number
      +left: number
      ..paddings..
      +paddingTop: number
      +paddingRight: number
      +paddingBottom: number
      +paddingLeft: number
      ..cursor..
      +cursor: string
      ..line width..
      +lineWidth: number
      +lineWidthActive: number
      +lineWidthFocus: number
      +lineWidthHover: number
      ..line color..
      +lineColor: string
      +lineColorActive: string
      +lineColorFocus: string
      +lineColorHover: string
      ..line style..
      +lineStyle: string
      +lineStyleActive: string
      +lineStyleFocus: string
      +lineStyleHover: string
      ..fill color (background)..
      +fillColor: string
      +fillColorActive: string
      +fillColorFocus: string
      +fillColorHover: string
      ..font family..
      +fontFamily: string
      +fontFamilyActive: string
      +fontFamilyFocus: string
      +fontFamilyHover: string
      ..font size..
      +fontSize: string
      +fontSizeActive: string
      +fontSizeFocus: string
      +fontSizeHover: string
      ..font weight..
      +fontWeight: string
      +fontWeightActive: string
      +fontWeightFocus: string
      +fontWeightHover: string
      ..font style..
      +fontStyle: string
      +fontStyleActive: string
      +fontStyleFocus: string
      +fontStyleHover: string
      ..tick style..
      +tickStyle: TickStyles
      +tickWidth: number
      +tickHeight: number
      ..curve style..
      +curveType: CurveTypes
      +curveBasisBeta: number [0..1]
      +curveBezierTangents: CurveBezierTangents
      +curveCardinalTension: number [0..1]
      +curveCatmullRomAlpha: number [0..1]
      +curveCubicMonotonicity: CurveCubicMonotonicity
      +curveStepChange: CurveStepChanges
    }
    TickStyles -- TrackedStyle
    CurveTypes -- TrackedStyle
    CurveBezierTangents -- TrackedStyle
    CurveCubicMonotonicity -- TrackedStyle
    CurveStepChanges -- TrackedStyle

    class AbstractChartElement {
      -_forceUpdate: boolean
      ..
      #[[./AbstractChartElement_forceUpdate.svg forceUpdate]](): void
      #[[./AbstractChartElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      ..
      #[[./AbstractChartElement_firstUpdated.svg firstUpdated]](props: Map<string, unknown>): void
      #[[./AbstractChartElement_updated.svg updated]](props: Map<string, unknown>): void
      ..
      #{abstract} firstUpgrade(): void
      #{abstract} upgrade(): void
    }
    UnifiedElement <|-- AbstractChartElement

    abstract class AbstractStyleElement {
      -_shadowStyle: CompletedCSSStyleSheet
      -_geometryStyle: CompletedCSSStyleSheet
      -_computedStyle: CSSStyleDeclaration
      -_trackedStyleStore: TrackedStyle
      -_trackedStyleCache: TrackedStyle
      ..
      #{abstract} selector: null | string
      ..
      +get geometryStyle(): CompletedCSSStyleSheet
      +get staticStyle(): lit.CSSResult
      +get trackedStyle(): TrackedStyle
      ..
      +[[./AbstractStyleElement_connectedCallback.svg connectedCallback]](): void
      +[[./AbstractStyleElement_disconnectedCallback.svg disconnectedCallback]](): void
      ..
      -observersStart(): void
      -observersStop(): void
      -clearTrackedStyleCache(): void
      -[[./AbstractStyleElement_htmlStyleChangedListener.svg htmlStyleChangedListener]](evt: HtmlStyleChanged): void
      ..
      #[[./AbstractStyleElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      ..
      #[[./AbstractStyleElement_firstUpgrade.svg firstUgrade]](): void
      #[[./AbstractStyleElement_upgrade.svg upgrade]](): void
      ..
      -[[./AbstractStyleElement_renderStyle.svg renderStyle]](): void
      -[[./AbstractStyleElement_updateStyle.svg updateStyle]](): void
      ..
      -[[./AbstractStyleElement_updateShadowStyle.svg updateShadowStyle]](): void
      #getShadowStyle(): string[]
      ..
      -[[./AbstractStyleElement_updateGeometryStyle.svg updateGeometryStyle]](): void
      #[[./AbstractStyleElement_getGeometryStyle.svg getGeometryStyle]](): string[]
      ..
      -getSvgStateStyle(state?: hover|focus|active): string
      -getSvgCursorStyle(state?: hover|focus|active): string
      -getSvgOutlineStyle(state?: hover|focus|active): string
      -getSvgFontFamilyStyle(state?: hover|focus|active): string
      -getSvgFontSizeStyle(state?: hover|focus|active): string
      -getSvgFontWeightStyle(state?: hover|focus|active): string
      -getSvgFontStyleStyle(state?: hover|focus|active): string
      -getSvgStrokeStyle(state?: hover|focus|active): string
      -getSvgStrokeWidthStyle(state?: hover|focus|active): string
      -getSvgStrokeDasharrayStyle(state?: hover|focus|active): string
      -getSvgStrokeLinecapStyle(state?: hover|focus|active): string
      -getSvgFillStyle(state?: hover|focus|active): string
    }
    AbstractChartElement <|-- AbstractStyleElement
    AbstractStyleElement *- TrackedStyle

    class HdmlViewElement {
      -_svg: null | Selection<SVGSVGElement>
      -_geometryStyleSet: Set<CSSStyleSheet>
      ..
      #selector: string
      ..
      +svg: null | Selection<SVGSVGElement>
      ..
      +[[./HdmlViewElement_connectedCallback.svg connectedCallback]](): void
      +[[./HdmlViewElement_disconnectedCallback.svg disconnectedCallback]](): void
      ..
      -[[./HdmlViewElement_hdmlElementStyleUpdatedListener.svg hdmlElementStyleUpdatedListener]](evt: HdmlElementStyleUpdated): void
      ..
      +render(): lit.TemplateResult<1>
      ..
      #[[./HdmlViewElement_firstUpgrade.svg firstUpgrade]](): void
      #[[./HdmlViewElement_upgrade.svg upgrade]](): void
    }
    AbstractStyleElement <|-- HdmlViewElement

    abstract class AbstractPlaneElement
    AbstractStyleElement <|-- AbstractPlaneElement

    class CartesianPlaneElement {
      +{static} styles: lit.CSSResult
      ..
      #selector: null
      ..
      +render(): lit.TemplateResult<1>
    }
    AbstractPlaneElement <|-- CartesianPlaneElement

    class PolarPlaneElement {
      +{static} styles: lit.CSSResult
      ..
      #selector: null
      ..
      +render(): lit.TemplateResult<1>
    }
    AbstractPlaneElement <|-- PolarPlaneElement

    abstract class AbstractScaleElement {
      #selector: null
      ..
      +get plane(): null | AbstractPlaneElement
      +get dimension(): null | Dimension
      +get range(): [number, number]
      ..
      #[[./AbstractScaleElement_upgrade.svg upgrade]](): void
      #getShadowStyle(): [string]
      ..
      #{abstract} updateScale(): void
      ..
      +render(): lit.TemplateResult<1>
    }
    AbstractStyleElement <|---- AbstractScaleElement
    AbstractPlaneElement ---o AbstractScaleElement

    enum Dimension {
      +"X"
      +"Y"
      +"Z"
      +"I"
      +"J"
    }
    AbstractScaleElement *- Dimension

    class LinearScaleElement {
      +{static} styles: lit.CSSResult
      ..
      -_min: number
      -_max: number
      -_scale: null | d3.ScaleLinear<number, number, never>
      ..
      +set min(val: number)
      +get min(): number
      +set max(val: number)
      +get max(): number
      +get scale(): null | d3.ScaleLinear<number, number, never>
      ..
      #[[./LinearScaleElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      #updateScale(): void
    }
    AbstractScaleElement <|-- LinearScaleElement

    class OrdinalScaleElement {
      +{static} styles: lit.CSSResult
      ..
      -_bandwidth: number
      -_values: string[]
      -_unknown: null | string
      -_scale: null | ScaleBand<string>
      ..
      +set bandwidth(val: number)
      +get bandwidth(): number
      +set values(val: Array<string>)
      +get values(): Array<string>
      +set unknown(val: null | string)
      +get unknown(): null | string
      +get scale(): null | ScaleBand<string>
      ..
      #[[./OrdinalScaleElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      #updateScale(): void
    }
    AbstractScaleElement <|-- OrdinalScaleElement

    class ChromaticScaleElement {
      +{static} styles: lit.CSSResult
      ..
      TBD
      ..
      #[[./ChromaticScaleElement_shouldUpdate.svg shouldUpdate]](props: Map<string, unknown>): boolean
      #updateScale(): void
    }
    AbstractScaleElement <|-- ChromaticScaleElement

    abstract class AbstractGeometryElement {
      #[[./AbstractGeometryElement_firstUpgrade.svg firstUpgrade]](): void
      #[[./AbstractGeometryElement_upgrade.svg upgrade]](): void
      ..
      #{abstract} renderGeometry(): void
      #{abstract} updateGeometry(): void
    }
    AbstractStyleElement <|------ AbstractGeometryElement
    HdmlViewElement ------o AbstractGeometryElement
  }
@enduml

@startuml LitElement_constructor
  title LitElement#constructor()

  start
    :[[./LitElement_requestUpdate.svg this.requestUpdate()]] ]
  end
@enduml

@startuml LitElement_requestUpdate
  title LitElement#requestUpdate()

  start
    :Adding request to the queue,\nasync dequeue.|
    :[[./LitElement_performUpdate.svg this.performUpdate()]] ]
  end
@enduml

@startuml LitElement_performUpdate
  title LitElement#performUpdate()

  start

    group Update
      if (this.shouldUpdate()) then (yes)
        :this.willUpdate()]
        :[[./LitElement_update.svg this.update()]] ]
      endif
    end group

    group PostUpdate
      if (!this.hasUpdated) then (yes)
        :this.firstUpdated()]
      endif
      :this.updated()]
      :[[./LitElement_getUpdateComplete.svg this.getUpdateComplete()]] ]
    end group

  end
@enduml

@startuml LitElement_update
  title LitElement#update()

  start
    :Reflects property values to attributes.]
    :this.render()]
  end
@enduml

@startuml LitElement_getUpdateComplete
  title LitElement#getUpdateComplete()

  start
    :resolve(this.updateComplete)]
  end
@enduml

@startuml AbstractChartElement_forceUpdate
  title AbstractChartElement#forceUpdate()

  start
    :this._forceUpdate = true]
    :this.[[./LitElement_requestUpdate.svg requestUpdate]]()]
  end
@enduml

@startuml AbstractChartElement_shouldUpdate
  title AbstractChartElement#shouldUpdate()

  start
    if (this._forceUpdate === true) then (yes)
      :res = true]
    else (no)
      :res = false]
    endif
    :this._forceUpdate = false]
    :return res/
  end
@enduml

@startuml AbstractChartElement_firstUpdated
  title AbstractChartElement#firstUpdated()

  start
    :setTimeout(this.firstUpgrade)]
  end
@enduml

@startuml AbstractChartElement_updated
  title AbstractChartElement#updated()

  start
    :setTimeout(this.upgrade)]
  end
@enduml

@startuml AbstractStyleElement_firstUpgrade
  title AbstractStyleElement#firstUpgrade()

  start
    :this.[[./AbstractStyleElement_renderStyle.svg renderStyle]]()]
    :this.dispatchEvent("HdmlElementStyleAdded")]
  end
@enduml

@startuml AbstractStyleElement_upgrade
  title AbstractStyleElement#upgrade()

  start
    :this.[[./AbstractStyleElement_updateStyle.svg updateStyle]]()]
    :this.dispatchEvent("HdmlElementStyleUpdated")]
  end
@enduml

@startuml AbstractStyleElement_connectedCallback
  title AbstractStyleElement#connectedCallback()

  start
    :super.connectedCallback()]
    :window.addEventListener("HtmlStyleUpdated", this.[[./AbstractStyleElement_htmlStyleChangedListener.svg htmlStyleChangedListener]])]
    :this.observersStart()]
  end
@enduml

@startuml AbstractStyleElement_disconnectedCallback
  title AbstractStyleElement#disconnectedCallback()

  start
    :super.disconnectedCallback()]
    :window.removeEventListener("HtmlStyleUpdated", this.[[./AbstractStyleElement_htmlStyleChangedListener.svg htmlStyleChangedListener]])]
    :this.observersStop()]
  end
@enduml

@startuml AbstractStyleElement_htmlStyleChangedListener
  title AbstractStyleElement#htmlStyleChangedListener()

  start
    :this.clearTrackedStyleCache()]
    :this.[[./AbstractChartElement_forceUpdate.svg forceUpdate]]()]
  end
@enduml

@startuml AbstractStyleElement_shouldUpdate
  title AbstractStyleElement#shouldUpdate()

  start
    if (this._trackedStyleCache !== this._trackedStyleStore) then (yes)
      :return true/
    else (no)
      :return super.[[./AbstractChartElement_shouldUpdate.svg shouldUpdate]]() /
    endif
  end
@enduml

@startuml AbstractStyleElement_renderStyle
  title AbstractStyleElement#renderStyle()

  start
    :lit.adoptStyles(this.renderRoot, [this.staticStyle, ...this._shadowStyle])]
  end
@enduml

@startuml AbstractStyleElement_updateStyle
  title AbstractStyleElement#updateStyle()

  start
    :this._trackedStyleStore = ...this._trackedStyleCache]
    :this.[[./AbstractStyleElement_updateShadowStyle.svg updateShadowStyle]]()]
    :this.[[./AbstractStyleElement_updateGeometryStyle.svg updateGeometryStyle]]()]
  end
@enduml

@startuml AbstractStyleElement_updateShadowStyle
  title AbstractStyleElement#updateShadowStyle()

  start
    :styles = this.getShadowStyle()]
    while (i = this._shadowStyle.cssRules.length - 1; i >= 0; i--)
      :this._shadowStyle.deleteRule(i)]
    endwhile
    while (styles.forEach(rule))
      :this._shadowStyle.insertRule(rule)]
    endwhile
  end
@enduml

@startuml AbstractStyleElement_updateGeometryStyle
  title AbstractStyleElement#updateGeometryStyle()

  start
    :styles = this.[[./AbstractStyleElement_getGeometryStyle.svg getGeometryStyle]]()]
    while (i = this.geometryStyle.cssRules.length - 1; i >= 0; i--)
      :this.geometryStyle.deleteRule(i)]
    endwhile
    while (styles.forEach(rule))
      :this.geometryStyle.insertRule(rule)]
    endwhile
  end
@enduml

@startuml AbstractStyleElement_getGeometryStyle
  title AbstractStyleElement#getGeometryStyle()

  start
    :default = getSvgStateStyle()]
    :active = getSvgStateStyle("active")]
    :focus = getSvgStateStyle("focus")]
    :hover = getSvgStateStyle("hover")]
    :return [default, active, focus, hover] /
  end
@enduml

@startuml HdmlViewElement_connectedCallback
  title HdmlViewElement#connectedCallback()

  start
    :super.[[./AbstractStyleElement_connectedCallback.svg connectedCallback]]()]
    :window.addEventListener("HdmlElementStyleUpdated", this.[[./HdmlViewElement_hdmlElementStyleUpdatedListener.svg hdmlElementStyleUpdatedListener]])]
  end
@enduml

@startuml HdmlViewElement_disconnectedCallback
  title HdmlViewElement#disconnectedCallback()

  start
    :super.[[./AbstractStyleElement_disconnectedCallback.svg connectedCallback]]()]
    :window.removeEventListener("HdmlElementStyleUpdated", this.[[./HdmlViewElement_hdmlElementStyleUpdatedListener.svg hdmlElementStyleUpdatedListener]])]
  end
@enduml

@startuml HdmlViewElement_hdmlElementStyleUpdatedListener
  title HdmlViewElement#hdmlElementStyleUpdatedListener()

  start
    :evt/
    if (!this._geometryStyleSet.has(evt.target.geometryStyle))
      :this._geometryStyleSet.add(stylesheet)]
      :lit.adoptStyles(this.renderRoot, [this.staticStyle, ...this._geometryStyleSet.values()])]
    endif
  end
@enduml

@startuml HdmlViewElement_firstUpgrade
  title HdmlViewElement#firstUpgrade()

  start
    :super.[[./AbstractStyleElement_firstUpgrade.svg firstUpgrade]]()]
    :this._svg = select(this.renderRoot.querySelector("svg"))]
    :this.dispatchEvent("HdmlViewAdded")]
  end
@enduml

@startuml HdmlViewElement_upgrade
  title HdmlViewElement#upgrade()

  start
    :super.[[./AbstractStyleElement_upgrade.svg upgrade]]()]
    :this._svg.updateViewBox()]
    :this.dispatchEvent("HdmlViewUpdated")]
  end
@enduml

@startuml AbstractScaleElement_upgrade
  title AbstractScaleElement#upgrade()

  start
    :super.[[./AbstractStyleElement_upgrade.svg upgrade]]()]
    :this.updateScale()]
    :this.dispatchEvent("HdmlScaleUpdated")]
  end
@enduml

@startuml LinearScaleElement_shouldUpdate
  title LinearScaleElement#shouldUpdate()

  start
    if (this.min || this.max changed) then (yes)
      :return true/
    else (no)
      :return super.[[./AbstractStyleElement_shouldUpdate.svg shouldUpdate]]() /
    endif
  end
@enduml

@startuml OrdinalScaleElement_shouldUpdate
  title OrdinalScaleElement#shouldUpdate()

  start
    if (this.bandwidth || this.values || this.unknown changed) then (yes)
      :return true/
    else (no)
      :return super.[[./AbstractStyleElement_shouldUpdate.svg shouldUpdate]]() /
    endif
  end
@enduml

@startuml ChromaticScaleElement_shouldUpdate
  title ChromaticScaleElement#shouldUpdate()

  start
    if (TBD properties changed) then (yes)
      :return true/
    else (no)
      :return super.[[./AbstractStyleElement_shouldUpdate.svg shouldUpdate]]() /
    endif
  end
@enduml

@startuml AbstractGeometryElement_firstUpgrade
  title AbstractGeometryElement#firstUpgrade()

  start
    :super.[[./AbstractStyleElement_firstUpgrade.svg firstUpgrade]]()]
    :this.renderGeometry()]
    :this.dispatchEvent("HdmlElementGeometryAdded")]
  end
@enduml

@startuml AbstractGeometryElement_upgrade
  title AbstractGeometryElement#upgrade()

  start
    :super.[[./AbstractStyleElement_upgrade.svg upgrade]]()]
    :this.updateGeometry()]
    :this.dispatchEvent("HdmlElementGeometryUpdated")]
  end
@enduml